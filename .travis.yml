language: python
sudo: required
python:
  - "2.7"
services:
  - docker
env:
  global:
    - exit_code=0
    - number_per_job=2
    - message=()
    - max_retry_count=2
    - secure: "JfQ4kPKwm76uNmsCqYu3B7KaKMc3cmgMmxJOi3n/jTG/Hfx3YcFuj/3/pVVaV67pxP6Khm2E4ygOEjcQKjZNA9ayZsnrM/9xEtJsdJqvVwKMVpro07CE15XBUTZOC+YTTYj2adfbRDtpJD+MyW5XWF1DzTQGkf/OPlKJIfNf+og2GmMF8/hcU8Px4jPwaxHH35zoJ3Kc2cAoMS4ci+QADs08appGV8TA7iHOJqdFx4a0DeY3nOuTtPSSMjjqk+MH+w4LX1IL1hRyr5vLmlj3Jz0lxH+pUbBwjecpONfsfWQQuyJRxql9vqbZ4RycCXbXFed1zhgh4jfJ9QFhR4iDX0FRGXzRLXgpNtC5xrB46UzpK02g0D3LoOZ+tBP2Ymgh7i6SdssvaWB0x7Nr7/zQieWe2wMmKiD3hZjJoytjLqGUvcDhWShsjn7uxTKr8F5aw3zcgDXrK7WqoVQquWDfycBecXpT9AHxdfz+2usACFVpJnKs90AuZs0fh0EB2AM6qRVzQofajKtVLFCRxMG/ICN2XnbR/eRDZSJz/JUQfwIgAyyz7pfFx0//QfTNE04yVyEx9UGCElnbWf5J1MwU/FmrXqgVtKw3BEETAUDP2rym/n86LAHRg7DEaHVoSUIxuRvFbqfpFMZ+Uha1e4ZX1DwzCPYuh7GBiJwvK3l+Z7U="
    - secure: "az+Lj1LcBSj0jKwtF4IOpRcOEY+dPS0S7aB3Vy66yy2pQjXdKvKQ0J8+4zS6QLrjROP1+ZcwvMESZxT4O6A7K6nBbIL5fFMzPKWR31GOql1u+bT0NiI0NaSX/sriBXqdJ/u/tTwuql9ZA6TMUewvVqbrgHofGd16zP2TXxwLiQalk1VOno6vno9cMt5a+GXBoxF/TqIPjOvYMfXosKWqS+JraEFCYKSH3YxulW+7tcOVrD4JvceiuCSNkQauDBf/3nNj9oBSJLqVvjOqNpfDFz4ykt/rss9iF5njW/GVzuBRDR4SjX/C68bImxU2Qo8V8YraWyjVg4J5Kqsf7nHTbQmsmWGCCePPO1dDyo8WEo2a+w0j4shN3B0kU4NRxu2msY4dedU1R31SQXCAXFUkGnvQ7Nu0LXrHJPThnY/v8IwN2R4BVeOI7V6iL+DajKkenhVJxNQKxVtaU+YFqDqBzu1ZFdxGMsxE5QsxtFodz4tw1DcKF6Ml2GUnnQwKDf5P5a7SiqHx0804JC6TE3Mus1VpPHuo6I7aA8BGMpTQpCQW2Y8kKw9/eZXg/pVCZBREA17yqyPYl0XaNeuGX6N+ultIld7FacUUXQRGjnqSB4iJo4TX24ZlQOwYhVrQnWSqcEwnSmvhw6HI7FS4c1aDB2KvtvEKxqPOkOBzjk4S8Ak="
    - secure: "uyP9khU6EyJENwfA6Wuio2xh7qCur0zwnj+Pra+nsY9msozG+68nYQz1oeKs8SQodmYwDpx6rtriy6w0TnR1gmtDE9JE7JPqF60oegq+m27sRVtfMnVbbuLbZf7NL8G8yFEcIha+qt06EijjpjvaTv15aHaYsmIqTckZoyulpQJf4xBNcblOGiH+Y1v6vurLbkbG0MnRuIUg2pSW48EbljuQV7VrvwGdWj61AKAjZPfDYcRq88Sg5enDdDrGv23kT+SifwdQBo8Z8rbGi+Ad1p8P6a07orrRXQGbLg+Tcu0afMH+uU81RU+o0ecMcyJVhL25ir1y+B33HlG6ZfApdSBc83boHpqmO3OFfjxMSX8IvYGey23cV+FMEhYJZmugyZACCxZGrBTeMhzJihrUmoaqTqB5ligFlmtOf3t6JvTne/08jWvLH9kOkXDXNHQrPKTy0a2vpbUdr79jn8ev0apgBTNM7jzKaUh8jvTjxC+7edJUrdxZp66DBsB7bPEvOhJroZMQpk3RMx0fpm6xWXHizkr5Hn9bHVa+8beGqrryKIN0XwROmvyj9AGyhKayYexgLvxdPIULhJMmC2m3C0RQo8ktzwfCftX7DSthz+Ypn/KUmEQmT4oFIgd4r0TOUqOh7jbX2je4ilDL7nQKpTwMEXoiRLOO4MbVgJ2ekqk="
    - secure: "hpDrSKWksX2lnsQMHyQS6X8sZD+HQ4clZlE4mJJDYv6FIys5xqaC+oKaGtTPXZqMwLwOWduQxx/US6N9m1i19gKMJSkAARFh5zNtMURbMe4xBrLN3iotgJo10X4N62pe6X/uxPD60vgSOSkpGis3nGjZiYr7YCJ6cj7orTTtF39Jp0fk6p7M4/C3y4Ug41Ffe1lYUPYKY8vlC2lXCJpIgQckOvP5BUKmU0kHRYgw/t2nzyYVvwc5s87yOtZ5H3A2ZajwcbiCpP87Axz1RPbzk8ig4ox/xMs156gts4ElK24k7/SOei79RU9wICIb0lbCWGprNK/NphYHDRmXUUya64DTk8aWGHD508B36L1bTEg6Ja6FxtgKuZCeRK9zEJWBupF1Cdu79z3jzOLbcm/wb+nXCiDVdAdJ2fapwhy9RVsKJIHQzKAmfL8WU9/m9pjSJgtBse5z9BN0g3IzkgnRxOg2EkhjPNJZyRN8IGX+XItzA1Kk90nb0Y0tjgNUxcckbLjoFGMNfAqQEHMhrKrjuKl3Rrq6N8TQsSq3xjrurv2TgquVhLula5QoMN7/XZ5lQV0j1Bo3HUZuLuw1k4uUNXWzV46m5oHTUeDxshJiK7Dl8D7afFC7p0nBMjGxJ4ebyVbNuj8nMGHekjj5fKbyx1DYpcm2DNKOt/4oSPSWhQk="
before_install:
  - create_resource_group() {
      name=$1;
      name2=${name}2;
      ansible-playbook create_resource_group.yml --extra-vars="name=$name name2=$name2";
    }
  - delete_resource_group() {
      name=$1;
      name2=${name}2;
      ansible-playbook delete_resource_group.yml --extra-vars="name=$name name2=$name2";
    }
  - "write_credential() { printf \"AZURE_CLIENT_ID: ${AZURE_CLIENT_ID}\nAZURE_SECRET: ${AZURE_SECRET}\nAZURE_SUBSCRIPTION_ID: ${AZURE_SUBSCRIPTION_ID}\nAZURE_TENANT: ${AZURE_TENANT}\nRESOURCE_GROUP: $group_name\nRESOURCE_GROUP_SECONDARY: $group_name_secondary\" >> test/integration/cloud-config-azure.yml; }"
  - run_test() {
      test_name=$1;
      group_name="asb-it-${test_name##azure_rm_}";
      group_name_secondary="${group_name}2";
      loop=1;

      while [ $loop -le $max_retry_count ]; do

        echo Run test $test_name $loop time;
        
        create_resource_group $group_name;
        rm test/integration/cloud-config-azure.yml 2>/dev/null;
        touch test/integration/cloud-config-azure.yml;
        write_credential;
        travis_wait 50 ansible-test integration $test_name --docker --color=yes;
        
        if [ $? -ne 0 ]; then
          echo test $test_name failed at $loop time run;

          if [ $loop -eq $max_retry_count ]; then
            message+=($test_name);
            export exit_code=1;
          fi;
          loop=$[$loop+1];
        else
          echo test $test_name passed at $loop time run;
          travis_wait 50 delete_resource_group $group_name;
          break;
        fi;
      done;

      travis_wait 50 delete_resource_group $group_name;
    }
  - scan_test() {
      end=$((id * number_per_job));
      start=$((end - number_per_job));
      liststr=test/integration/targets/azure_rm_*;
      list=($liststr);
      echo start = $start, end = $end, list_lenth = ${#list[@]};
      for (( i = $start; i < $end; i++ )); do
        if [ "$i" -lt "${#list[@]}" ]; then
          file=${list[$i]};
          name=${file##test/integration/targets/};
          run_test $name;
        fi

      done
    }
install:
  - sudo apt-get update
  - sudo apt-get install -y libssl-dev libffi-dev python-dev python-pip
  - mkdir ~/.azure
  - touch ~/.azure/credentials
  - printf "[default]\nsubscription_id=${AZURE_SUBSCRIPTION_ID}\nclient_id=${AZURE_CLIENT_ID}\nsecret=${AZURE_SECRET}\ntenant=${AZURE_TENANT}" >> ~/.azure/credentials
  - git clone https://github.com/VSChina/ansible.git
  - cd ansible
  - pip install virtualenv
  - virtualenv venv
  - . venv/bin/activate
  - pip install .
  - pip install -r requirements.txt
  - pip install -r packaging/requirements/requirements-azure.txt
  - . hacking/env-setup
  - git clone https://github.com/gavinfish/azuretest.git
  - cd azuretest
  - pip freeze
  - ansible --version
script:
  - docker --version
  - scan_test
  - (>&2 echo $message)
  - exit $exit_code

notifications:
  email:
    recipients:
      - jieshe@microsoft.com
    on_success: always
    on_failure: always